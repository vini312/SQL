DROP TABLE a3_transactions;
DROP TABLE a3_accounts;
DROP TABLE a3_customers;
DROP TABLE a3_account_types;

CREATE TABLE a3_account_types (
    AccountType CHAR(1)         PRIMARY KEY,
    TypeName    VARCHAR2(15)    NOT NULL
    );
    
CREATE TABLE a3_customers (
    customerID  INT   GENERATED BY DEFAULT ON NULL AS IDENTITY(START with 1001 INCREMENT by 1) PRIMARY KEY,
    firstname   VARCHAR2(20)    NOT NULL,
    lastname    VARCHAR2(20)    NOT NULL,
    email       VARCHAR2(50)    NOT NULL,
    DOB         DATE,
    phone       VARCHAR2(10)
    );
    
CREATE TABLE a3_accounts (
    accountNo       INT   GENERATED BY DEFAULT ON NULL AS IDENTITY(START with 603141 INCREMENT by 1) PRIMARY KEY,
    accountType     CHAR(1)         DEFAULT 'C',
    customerID      INT      NOT NULL,
    currentBalance  DECIMAL(10,2)   DEFAULT 0.0,
    dtOpen          DATE            DEFAULT SYSDATE,
    isActive        NUMBER(1)       DEFAULT 1,
    CONSTRAINT accounts_currentBalance_chk CHECK (currentBalance >= 0.0),
    CONSTRAINT accounts_accountType_fk FOREIGN KEY(accountType) REFERENCES a3_account_types (accountType),
    CONSTRAINT accounts_customerID_fk FOREIGN KEY(customerID) REFERENCES a3_customers (customerID)
    );

CREATE TABLE a3_transactions (
    transactionID   INT   GENERATED BY DEFAULT ON NULL AS IDENTITY(START with 8491001 INCREMENT by 1) PRIMARY KEY,
    accountNo       INT       NOT NULL,
    transactionType CHAR(1)         NOT NULL,
    amount          DECIMAL(10,2)   DEFAULT 0.0,
    description     VARCHAR2(25)    NOT NULL,
    transDate       DATE            DEFAULT SYSDATE,
    refNum          VARCHAR2(12),
    CONSTRAINT trans_transType_chk CHECK (transactionType IN('D', 'C')),
    CONSTRAINT trans_accountNo_fk FOREIGN KEY(accountNo) REFERENCES a3_accounts (accountNo)
    );
    
INSERT INTO a3_account_types VALUES( 'C', 'Chequing');
INSERT INTO a3_account_types VALUES( 'S', 'Savings');


-- Managing permissions
REVOKE ALL ON a3_transactions FROM PUBLIC;
REVOKE ALL ON a3_accounts FROM PUBLIC;
REVOKE ALL ON a3_customers FROM PUBLIC;
REVOKE ALL ON a3_account_types FROM PUBLIC;

GRANT ALL ON a3_transactions TO dbs301_201d15 WITH GRANT OPTION;
GRANT ALL ON a3_accounts TO dbs301_201d15 WITH GRANT OPTION;
GRANT ALL ON a3_customers TO dbs301_201d15 WITH GRANT OPTION;
GRANT ALL ON a3_account_types TO dbs301_201d15 WITH GRANT OPTION;

COMMIT;

--a.	Create a customer with your name---

INSERT INTO a3_customers (firstname, lastname, email, DOB, phone)
    VALUES(
        'Vinicius',
        'Carassini',
        'vcarassini@myseneca.ca',
        TO_DATE(19901112, 'yyyymmdd'),
        4448883333
        );

-- b. You open a chequing account at the bank and deposit $500.00 ---

INSERT INTO a3_accounts (customerid)
    VALUES(1001);

SELECT currentBalance
    FROM a3_accounts
    WHERE customerid = 1001;
    
UPDATE a3_accounts
    SET currentbalance = (currentbalance + 500)
    WHERE customerid = 1001;

PROMPT ****** updated balance for Chequing first deposit
SELECT currentBalance
    FROM a3_accounts
    WHERE customerid = 1001;
    
INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'C',
            500,
            'first deposit'
            );


COMMIT;
    
-- c. You open a savings account and the bank and your parents deposit $1000.00 through e-transfer --

INSERT INTO a3_accounts (accounttype, customerid)
    VALUES('S', 1001);
    
UPDATE a3_accounts
    SET currentbalance = (currentbalance + 1000)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'S';

PROMPT ****** updated balance for Savings first deposit
SELECT currentBalance
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'S';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603142,
            'C',
            1000,
            'e-transfer deposit'
            );

SELECT * FROM a3_transactions;


COMMIT;

-- d. You buy groceries at Walmart and debit $112.34 from chequing --

PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 112.34)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 112.34)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
    
UPDATE a3_accounts
    SET currentbalance = (currentbalance - 112.34)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'D',
            -112.34,
            'Walmart'
            );

SELECT * FROM a3_transactions;

COMMIT;

-- e. You purchase a song from iTunes for $1.99 from chequing.  You receive a confirmation code of CQ3E5RZ. --

PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 1.99)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 1.99)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
    
UPDATE a3_accounts
    SET currentbalance = (currentbalance - 1.99)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description, refnum)
    VALUES ( 603141,
            'D',
            -1.99,
            'iTunes',
            'CQ3E5RZ'
            );

SELECT * FROM a3_transactions;

COMMIT;

--f. You have to pay first and last months rent on your new apartment.  The monthly rent is $800 and you write a cheque
--(#005) for it (i.e. chequing account). --

PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 1600)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 1600)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
-- operation fails, nothing to commit

--g. The cheque you wrote bounces (NSF – Non-Sufficient Funds) and the bank charges you a $45 fee --

PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 45)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 45)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

UPDATE a3_accounts
    SET currentbalance = (currentbalance - 45)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
        
INSERT INTO a3_transactions (accountno, transactionType, amount, description, refnum)
    VALUES ( 603141,
            'D',
            -45.00,
            'Cheque bouce fee',
            '#005'
            );

SELECT * FROM a3_transactions;

COMMIT;

--h. Your Mom and Dad withdrawal money from your RESP for school expenses $2000
--which they deposit directly into your savings account. --

UPDATE a3_accounts
    SET currentbalance = (currentbalance + 2000)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'S';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603142,
            'C',
            2000,
            'direct deposit'
            );

SELECT * FROM a3_transactions;

COMMIT;

--i. You get a certified cheque for the first and last month’s rent plus the $25 fee your
--landlord charges you.  There is an $8 fee for the certified cheque charged to you by the bank.--

PROMPT ****** transfer money from savings to chequing
PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 2000)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 2000)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'S';

UPDATE a3_accounts
    SET currentbalance = (currentbalance - 2000)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'S';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603142,
            'D',
            -2000.00,
            'Transfer between Acc'
            );

UPDATE a3_accounts
    SET currentbalance = (currentbalance + 2000)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
        
INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'C',
            2000.00,
            'Transfer between Acc'
            );

COMMIT;
-- transfer done

PROMPT ****** Cheque certification plus $8 tax
PROMPT ****** test if Debit is allowed

SELECT CASE
        WHEN (currentBalance - 1633)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 1633)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
        
UPDATE a3_accounts
    SET currentbalance = (currentbalance - 1625)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'D',
            -1625.00,
            'Certified Cheque'
            );

UPDATE a3_accounts
    SET currentbalance = (currentbalance - 8)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'D',
            -8.00,
            'Certified cheque fee'
            );

SELECT * FROM a3_transactions;

COMMIT;

--j. You go to the ATM to take out $40 cash to pay your friend back for
-- helping you move your stuff into your new apartment.--

PROMPT ****** test if Debit is allowed
SELECT CASE
        WHEN (currentBalance - 40)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 40)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
        
UPDATE a3_accounts
    SET currentbalance = (currentbalance - 40)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description)
    VALUES ( 603141,
            'D',
            -40.00,
            'ATM Withdraw'
            );

SELECT * FROM a3_transactions;

COMMIT;

--k. Using online banking, you pay your Roger’s mobile phone bill of $64.45.  You receive
--a confirmation code of X8U2 and your rogers account number is 345678. --

PROMPT ****** test if Debit is allowed

SELECT CASE
        WHEN (currentBalance - 64.45)<0 THEN 'Insufficient balance, operation denied'
        WHEN (currentBalance - 64.45)>0 THEN 'Operation allowed'
    END as "Debit Request"
    FROM a3_accounts
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';
        
UPDATE a3_accounts
    SET currentbalance = (currentbalance - 64.45)
    WHERE customerid = 1001
        AND UPPER(accounttype) = 'C';

INSERT INTO a3_transactions (accountno, transactionType, amount, description, refnum)
    VALUES ( 603141,
            'D',
            -64.45,
            'Rogers 345678',
            'X8U2'
            );

SELECT * FROM a3_transactions;

COMMIT;

--a.	Outputs a list of transactions, in chronological order.
--DIFFICULT BIT show the running balance beside each transaction in the transaction list.--

PROMPT ****** Chequing accout report

SELECT  transactionid "transID",
        transdate "Date",
        description "Details",
        CASE
            WHEN UPPER(transactiontype) = 'C' THEN amount
            ELSE 0
        END "Credit",
        CASE
            WHEN UPPER(transactiontype) = 'D' THEN amount
            ELSE 0
        END "Debit",
        sum(amount) OVER 
                (ORDER BY transactionid ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) "Balance"
    FROM a3_transactions
            JOIN a3_accounts USING(accountno)
    WHERE UPPER(accounttype) = 'C'
    ORDER BY transdate, transactionid;
    
PROMPT ****** Savings Account Report

SELECT  transactionid "transID",
        transdate "Date",
        description "Details",
        CASE
            WHEN UPPER(transactiontype) = 'C' THEN amount
            ELSE 0
        END "Credit",
        CASE
            WHEN UPPER(transactiontype) = 'D' THEN amount
            ELSE 0
        END "Debit",
        sum(amount) OVER 
                (ORDER BY transactionid ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) "Balance"
    FROM a3_transactions
        JOIN a3_accounts USING(accountno)
    WHERE UPPER(accounttype) = 'S'
    ORDER BY transdate, transactionid;
    
--b. Write SQL to calculate the total debits and credits (separate totals even though the amounts are in the same field) --

PROMPT ****** Total debit and credit for Chequing Account

SELECT  at.typename AS "Account Type", 
        sum(t.amount) AS "Total Credits",
        0 AS "Total Debits"
    FROM a3_transactions t
        JOIN a3_accounts a ON t.accountno=a.accountno 
        JOIN a3_account_types at ON a.accounttype=at.accounttype
    WHERE UPPER(a.accounttype) = 'C'
        AND UPPER(t.transactiontype) = 'C'
    GROUP BY at.typename,0
UNION
SELECT  at.typename,
        0,
        sum(t.amount)
    FROM a3_transactions t
        JOIN a3_accounts a ON t.accountno=a.accountno 
        JOIN a3_account_types at ON a.accounttype=at.accounttype
    WHERE UPPER(a.accounttype) = 'C'
        AND UPPER(t.transactiontype) = 'D'
    GROUP BY at.typename,0;

PROMPT ****** Total debit and credit for Savings Account

SELECT  at.typename AS "Account Type", 
        sum(t.amount) AS "Total Credits",
        0 AS "Total Debits"
    FROM a3_transactions t
        JOIN a3_accounts a ON t.accountno=a.accountno 
        JOIN a3_account_types at ON a.accounttype=at.accounttype
    WHERE UPPER(a.accounttype) = 'S'
        AND UPPER(t.transactiontype) = 'C'
    GROUP BY at.typename,0
UNION
SELECT  at.typename,
        0,
        sum(t.amount)
    FROM a3_transactions t
        JOIN a3_accounts a ON t.accountno=a.accountno 
        JOIN a3_account_types at ON a.accounttype=at.accounttype
    WHERE UPPER(a.accounttype) = 'S'
        AND UPPER(t.transactiontype) = 'D'
    GROUP BY at.typename,0;
    
--c. write SQL to verify that the sum of all transactions adds up
--to the same amount as the currentBalance.  If not, output the difference.--

PROMPT ****** sum of transactions for Chequing account

SELECT  currentbalance AS "Balance",
        sum(amount) AS "Sum of transactions"
    FROM a3_transactions
        JOIN a3_accounts USING(accountno)
    WHERE UPPER(accounttype) ='C'
    GROUP BY currentbalance;
    
PROMPT ****** sum of transactions for Savings account

SELECT  currentbalance AS "Balance",
        sum(amount) AS "Sum of transactions"
    FROM a3_transactions
        JOIN a3_accounts USING(accountno)
    WHERE UPPER(accounttype) = 'S'
    GROUP BY currentbalance;

--3.	Write a short paragraph (100-150 words)
-- about your own personal experience of learning in DBS301. 
-- What overall things did you learn and how did this course help
-- you become a better IT professional?

/*DBS301 was very important to help me develop enough knowledge to work properly with SQL. Now I am capable of creating a 
structure of tables properly related to each other and represent it in an ERD. Than create the tables, manage the permissions 
and create all the constraints necessary to link the information between the tables. Insert all necessary and relevant data 
on all the tables. Finally, according to the needs of the client access the data on these tables, create views to make it 
easier to access data that will be constantly accessed. When the information relates for more than one table I learned how to
use joins, sub-queries or set operators.
In general was a very good course, with a very good professor, and will be very useful for my professional future 
even if I don’t work directly with databases.
*/